generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entidades {
  entidad_id           Int                    @id @default(autoincrement())
  nombre               String                 @db.VarChar(255)
  resolver             String?                @db.VarChar(255)
  EntidadesCampos      EntidadesCampos[]
  EntidadesSecundarias EntidadesSecundarias[]
  Funcionalidades      Funcionalidades[]
  Permisos             Permisos[]
}

model Menus {
  menu_id           Int                 @id @default(autoincrement())
  title             String
  path              String
  isEntity          Boolean
  parentMenuId      Int?
  entidad_id        Int?
  order             Int?
  level             Int?
  icon              String?             @db.VarChar(255)
  activo            Boolean?            @default(true)
  Menus             Menus?              @relation("MenusToMenus_parentMenuId", fields: [parentMenuId], references: [menu_id], onDelete: Restrict, map: "fk_menus_parent_menu_id")
  other_Menus       Menus[]             @relation("MenusToMenus_parentMenuId")
  MenusPalabras     MenusPalabras[]
  MenusTraducciones MenusTraducciones[]
}

model Microservicios {
  microservicio_id     Int                   @id @default(autoincrement())
  name                 String                @db.VarChar(255)
  url                  String                @db.VarChar(255)
  activo               Boolean
  ProveedoresServicios ProveedoresServicios?
  Validaciones         Validaciones[]
}

model Permisos {
  permiso_id              Int                       @id @default(autoincrement())
  entidad_id              Int?
  permiso                 String?
  es_publico              Boolean?
  Entidades               Entidades?                @relation(fields: [entidad_id], references: [entidad_id], onDelete: Restrict, map: "fk_permisos_entidad_id")
  FuncionalidadesPermisos FuncionalidadesPermisos[]
  PermisosValidaciones    PermisosValidaciones[]
}

model Usuarios {
  usuario_id                      Int                            @id(map: "Usuario_id") @default(autoincrement())
  nombre_usuario                  String                         @db.VarChar(100)
  contrasena                      String                         @db.VarChar(100)
  correo                          String                         @db.VarChar(100)
  salt                            String                         @db.VarChar
  rol_id                          Int
  metodo_autenticacion_id         Int?
  tipo_usuario_id                 Int
  estado_usuario_id               Int
  sol_cambio_contrasena           Boolean?                       @default(false)
  fecha_vigencia_contrasena       DateTime?                      @db.Timestamp(6)
  fecha_creacion                  DateTime?                      @db.Timestamp(6)
  fecha_actualizacion             DateTime?                      @db.Timestamp(6)
  cant_intentos                   Int                            @default(0)
  TbEstadosUsuarios               TbEstadosUsuarios              @relation(fields: [estado_usuario_id], references: [estado_usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "TbEstadoUsuario_fk")
  TbMetodosAutenticacion          TbMetodosAutenticacion?        @relation(fields: [metodo_autenticacion_id], references: [metodo_autenticacion_id], onDelete: NoAction, onUpdate: NoAction, map: "TbMetodoAutenticacion_fk")
  TbRoles                         TbRoles                        @relation(fields: [rol_id], references: [rol_id], onDelete: NoAction, onUpdate: NoAction, map: "TbRol_fk")
  TbTipoUsuarios                  TbTipoUsuarios                 @relation(fields: [tipo_usuario_id], references: [tipo_usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "TbTipoUsuario_fk")
  UsuariosHistoricoContrasenasSec UsuariosHistoricoContrasenas[]
  UsuariosParametrosValores       UsuariosParametrosValores[]
  UsuariosSesionesSec             UsuariosSesiones?

  @@index([usuario_id], map: "pk_usuario_id")
}

model MenusPalabras {
  menu_palabra_id Int    @id @default(autoincrement())
  menu_id         Int
  palabra         String @db.VarChar(255)
  Menus           Menus  @relation(fields: [menu_id], references: [menu_id], map: "fk_men_pal_menu_id")
}

model MenusTraducciones {
  menu_traduccion_id Int          @id @default(autoincrement())
  traduccion         String       @db.VarChar(255)
  traduccion_id      Int
  menu_id            Int
  Menus              Menus        @relation(fields: [menu_id], references: [menu_id], map: "fk_men_tra_menu_id")
  Traducciones       Traducciones @relation(fields: [traduccion_id], references: [traduccion_id], map: "fk_men_tra_traduccion_id")
}

model PermisosValidaciones {
  permiso_validacion_id Int          @id @default(autoincrement())
  permiso_id            Int
  validacion_id         Int
  Validaciones          Validaciones @relation(fields: [validacion_id], references: [validacion_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_per_val_validacion_id")
  Permisos              Permisos     @relation(fields: [permiso_id], references: [permiso_id], map: "fk_per_val_permiso_id")
}

model Traducciones {
  traduccion_id     Int                 @id @default(autoincrement())
  idioma            String              @db.VarChar(255)
  sigla             String              @db.VarChar(10)
  MenusTraducciones MenusTraducciones[]
}

model Validaciones {
  validacion_id        Int                    @id @default(autoincrement())
  microservicio_id     Int?
  id_referenciado      String?                @db.VarChar(255)
  id_query             String?                @db.VarChar(255)
  name_query           String?                @db.VarChar(255)
  Microservicios       Microservicios?        @relation(fields: [microservicio_id], references: [microservicio_id], onDelete: Restrict, map: "fk_validaciones_microservicio_id")
  PermisosValidaciones PermisosValidaciones[]
}

model Iconos {
  icono_id Int     @id @default(autoincrement())
  nombre   String  @db.VarChar(255)
  activo   Boolean @default(true)
  unicode  String  @db.VarChar(255)
}

model ProveedoresServicios {
  proveedor_servicio_id Int            @id @default(autoincrement())
  microservicio_id      Int            @unique
  lista_proveedores     String
  model_data            String?
  Microservicios        Microservicios @relation(fields: [microservicio_id], references: [microservicio_id], map: "fk_pro_ser_microservicio_id")
}

model EntidadesCampos {
  entidad_campo_id Int       @id @default(autoincrement())
  nombre           String    @db.VarChar(255)
  tipo             String    @db.VarChar(100)
  entidad_id       Int
  Entidades        Entidades @relation(fields: [entidad_id], references: [entidad_id], map: "fk_ent_cam_entidad_id")
}

model EntidadesSecundarias {
  entidad_secundaria_id      Int                          @id @default(autoincrement())
  nombre                     String                       @db.VarChar(255)
  entidad_id                 Int
  Entidades                  Entidades                    @relation(fields: [entidad_id], references: [entidad_id], map: "fk_ent_sec_entidad_id")
  EntidadesSecundariasCampos EntidadesSecundariasCampos[]
}

model EntidadesSecundariasCampos {
  entidad_secundaria_campo_id Int                  @id @default(autoincrement())
  nombre                      String               @db.VarChar(255)
  tipo                        String               @db.VarChar(100)
  entidad_secundaria_id       Int
  EntidadesSecundarias        EntidadesSecundarias @relation(fields: [entidad_secundaria_id], references: [entidad_secundaria_id], map: "fk_ent_sec_cam_entidad_secundaria_id")
}

model Funcionalidades {
  funcionalidad_id        Int                       @id @default(autoincrement())
  nombre                  String
  entidad_id              Int
  Entidades               Entidades                 @relation(fields: [entidad_id], references: [entidad_id], map: "fk_funcionalidades_entidad_id")
  FuncionalidadesPermisos FuncionalidadesPermisos[]
  RolesFuncionalidades    RolesFuncionalidades[]
}

model FuncionalidadesPermisos {
  funcionalidad_permiso_id Int             @id @default(autoincrement())
  funcionalidad_id         Int
  permiso_id               Int
  Funcionalidades          Funcionalidades @relation(fields: [funcionalidad_id], references: [funcionalidad_id], map: "fk_fun_per_funcionalidad_id")
  Permisos                 Permisos        @relation(fields: [permiso_id], references: [permiso_id], map: "fk_fun_per_permiso_id")
}

model RolesFuncionalidades {
  rol_funcionalidad_id Int             @id @default(autoincrement())
  funcionalidad_id     Int
  rol_id               Int
  Funcionalidades      Funcionalidades @relation(fields: [funcionalidad_id], references: [funcionalidad_id], map: "fk_rol_fun_funcionalidad_id")
  TbRoles              TbRoles         @relation(fields: [rol_id], references: [rol_id], map: "fk_rol_fun_rol_id")
}

model UsuariosSesiones {
  usuario_sesion_id  Int       @id(map: "UsuarioSesion_id") @default(autoincrement())
  usuario_id         Int       @unique
  token              String?   @db.VarChar(255)
  fecha_ultimo_login DateTime? @db.Timestamp(6)
  Usuarios           Usuarios  @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "Usuario_fk")

  @@index([usuario_sesion_id], map: "pk_usuario_sesion_id")
}

model MetodosParametros {
  metodo_parametro_id     Int                    @id(map: "TbMetodoParametro_id") @default(autoincrement())
  metodo_autenticacion_id Int
  usuario_parametro_id    Int
  TbMetodosAutenticacion  TbMetodosAutenticacion @relation(fields: [metodo_autenticacion_id], references: [metodo_autenticacion_id], onDelete: NoAction, onUpdate: NoAction, map: "TbMetodoAutenticacion_fk")
  UsuariosParametros      UsuariosParametros     @relation(fields: [usuario_parametro_id], references: [usuario_parametro_id], onDelete: NoAction, onUpdate: NoAction, map: "TbUusarioParametro_fk")

  @@index([metodo_parametro_id], map: "pk_metodo_parametro_id")
}

model TbClasesParametros {
  clase_parametro_id Int                  @id(map: "TbClaseParametro_id") @default(autoincrement())
  nombre             String               @db.VarChar(50)
  UsuariosParametros UsuariosParametros[]

  @@index([clase_parametro_id], map: "pk_clase_parametro_id")
}

model TbEstadosUsuarios {
  estado_usuario_id Int        @id(map: "TbEstadoUsuario_id") @default(autoincrement())
  nombre            String     @db.VarChar(100)
  Usuarios          Usuarios[]

  @@index([estado_usuario_id], map: "pk_estado_usuario_id")
}

model TbMetodosAutenticacion {
  metodo_autenticacion_id Int                 @id(map: "TbMetodoAutenticacion_id") @default(autoincrement())
  nombre                  String              @unique @db.VarChar(100)
  MetodosParametros       MetodosParametros[]
  Usuarios                Usuarios[]

  @@index([metodo_autenticacion_id], map: "pk_metodo_autenticacion_id")
}

model TbRoles {
  rol_id               Int                    @id(map: "rol_id") @default(autoincrement())
  nombre               String                 @db.VarChar(100)
  RolesFuncionalidades RolesFuncionalidades[]
  Usuarios             Usuarios[]

  @@index([rol_id], map: "pk_rol_id")
}

model TbTipoUsuarios {
  tipo_usuario_id Int        @id(map: "TbTipoUsuario_id") @default(autoincrement())
  nombre          String     @db.VarChar(100)
  estado          Estado     @default(ACTIVO)
  Usuarios        Usuarios[]

  @@index([tipo_usuario_id], map: "pk_tipo_usuario_id")
}

model UsuariosHistoricoContrasenas {
  usu_historico_contrasena_id Int       @id(map: "UsuarioHistoricoContrasena_id") @default(autoincrement())
  usuario_id                  Int
  contrasena                  String?   @db.VarChar(100)
  fecha_actualizacion         DateTime? @db.Timestamp(6)
  Usuarios                    Usuarios  @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "Usuario_fk")

  @@index([usu_historico_contrasena_id], map: "usu_historico_contrasena_id")
}

model UsuariosParametros {
  usuario_parametro_id      Int                         @id(map: "UsuarioParametro_id") @default(autoincrement())
  clase_parametro_id        Int
  nombre                    String                      @db.VarChar(100)
  alias                     String                      @db.VarChar(100)
  descripcion               String                      @db.VarChar(255)
  valor_defecto             String?                     @db.VarChar(50)
  requerido                 Boolean?                    @default(false)
  TbClasesParametros        TbClasesParametros          @relation(fields: [clase_parametro_id], references: [clase_parametro_id], onDelete: NoAction, onUpdate: NoAction, map: "TbClaseParametro_fk")
  MetodosParametros         MetodosParametros[]
  UsuariosParametrosValores UsuariosParametrosValores[]

  @@index([usuario_parametro_id], map: "pk_usuario_parametro_id")
}

model UsuariosParametrosValores {
  usuario_parametro_valor_id Int                @id(map: "UsuarioParametroValor_id") @default(autoincrement())
  usuario_id                 Int
  usuario_parametro_id       Int
  valor                      String?            @db.VarChar(255)
  UsuariosParametros         UsuariosParametros @relation(fields: [usuario_parametro_id], references: [usuario_parametro_id], onDelete: NoAction, onUpdate: NoAction, map: "UsuarioParametro_fk")
  Usuarios                   Usuarios           @relation(fields: [usuario_id], references: [usuario_id], onDelete: NoAction, onUpdate: NoAction, map: "Usuario_fk")

  @@index([usuario_parametro_valor_id], map: "pk_usuario_parametro_valor_id")
}

enum Estado {
  ACTIVO
  INACTIVO
}
