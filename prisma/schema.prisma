generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auditorias {
  auditoria_id       Int       @id @default(autoincrement())
  status             String?   @db.VarChar(50)
  fecha_creacion     DateTime? @default(now()) @db.Timestamp(6)
  tipo               String?   @db.VarChar(50)
  username           String?   @db.VarChar(100)
  rol                String?   @db.VarChar(50)
  tiene_doble_factor Boolean?
  usuario_id         Int?
}

model DoblesFactores {
  doble_factor_id       Int                @id @default(autoincrement())
  otplib_secreta        String?
  esta_configurado      Boolean            @default(false)
  codigo_recuperacion   String?
  fecha_creacion_codigo DateTime?          @db.Timestamp(6)
  metodo_validacion     MetodosValidacion?
  usuario_id            Int?
  Usuarios              Usuarios?          @relation(fields: [usuario_id], references: [usuario_id])
}

model Entidades {
  entidad_id Int        @id @default(autoincrement())
  nombre     String     @db.VarChar(255)
  resolver   String?    @db.VarChar(255)
  es_entidad Boolean?   @default(true)
  Permisos   Permisos[]
}

model Menus {
  menu_id           Int                 @id @default(autoincrement())
  title             String
  path              String
  isEntity          Boolean
  parentMenuId      Int?
  entidad_id        Int?
  order             Int?
  level             Int?
  icon              String?             @db.VarChar(255)
  activo            Boolean?            @default(true)
  Menus             Menus?              @relation("MenusToMenus_parentMenuId", fields: [parentMenuId], references: [menu_id])
  other_Menus       Menus[]             @relation("MenusToMenus_parentMenuId")
  MenusPalabras     MenusPalabras[]
  MenusTraducciones MenusTraducciones[]
}

model Microservicios {
  microservicio_id     Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(255)
  url                  String                 @db.VarChar(255)
  activo               Boolean
  ProveedoresServicios ProveedoresServicios[]
  Validaciones         Validaciones[]
}

model Permisos {
  permiso_id           Int                    @id @default(autoincrement())
  entidad_id           Int?
  permiso              String?
  es_publico           Boolean?
  Entidades            Entidades?             @relation(fields: [entidad_id], references: [entidad_id])
  PermisosValidaciones PermisosValidaciones[]
  RolesPermisos        RolesPermisos[]
}

model Roles {
  rol_id        Int             @id @default(autoincrement())
  rol           String          @db.VarChar(100)
  RolesPermisos RolesPermisos[]
  Usuarios      Usuarios[]
}

model RolesPermisos {
  rol_permiso_id Int       @id @default(autoincrement())
  rol_id         Int
  permiso_id     Int?
  Permisos       Permisos? @relation(fields: [permiso_id], references: [permiso_id])
  Roles          Roles     @relation(fields: [rol_id], references: [rol_id])
}

model Usuarios {
  usuario_id         Int              @id @default(autoincrement())
  nombre             String           @db.VarChar(255)
  email              String           @db.VarChar(255)
  activo             Boolean?         @default(true)
  password           String?
  rol_id             Int?
  salt               String?
  token              String?
  username           String?
  tiene_doble_factor Boolean?         @default(false)
  Roles              Roles?           @relation(fields: [rol_id], references: [rol_id])
  DoblesFactores     DoblesFactores[]
}

model MenusPalabras {
  menu_palabra_id Int    @id @default(autoincrement())
  menu_id         Int
  palabra         String @db.VarChar(255)
  Menus           Menus  @relation(fields: [menu_id], references: [menu_id])
}

model MenusTraducciones {
  menu_traduccion_id Int          @id @default(autoincrement())
  traduccion         String       @db.VarChar(255)
  traduccion_id      Int
  menu_id            Int
  Menus              Menus        @relation(fields: [menu_id], references: [menu_id])
  Traducciones       Traducciones @relation(fields: [traduccion_id], references: [traduccion_id])
}

model PermisosValidaciones {
  permiso_validacion_id Int          @id @default(autoincrement())
  permiso_id            Int
  validacion_id         Int
  Permisos              Permisos     @relation(fields: [permiso_id], references: [permiso_id])
  Validaciones          Validaciones @relation(fields: [validacion_id], references: [validacion_id])
}

model Traducciones {
  traduccion_id     Int                 @id @default(autoincrement())
  idioma            String              @db.VarChar(255)
  sigla             String              @db.VarChar(10)
  MenusTraducciones MenusTraducciones[]
}

model Validaciones {
  validacion_id        Int                    @id @default(autoincrement())
  microservicio_id     Int?
  id_referenciado      String?                @db.VarChar(255)
  Microservicios       Microservicios?        @relation(fields: [microservicio_id], references: [microservicio_id])
  PermisosValidaciones PermisosValidaciones[]
}

model Iconos {
  icono_id Int     @id @default(autoincrement())
  nombre   String  @db.VarChar(255)
  activo   Boolean @default(true)
  unicode  String  @db.VarChar(255)
}

model ProveedoresServicios {
  proveedor_servicio_id       Int            @id @default(autoincrement())
  microservicio_id            Int
  lista_proveedores           String
  lista_entidades_secundarias String?
  Microservicios              Microservicios @relation(fields: [microservicio_id], references: [microservicio_id])
}

enum MetodosValidacion {
  EMAIL
  TOTP
}
